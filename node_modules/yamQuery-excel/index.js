'use strict';
var fs = require('co-fs')
var xlsx = require('node-xlsx')
var co = require('co')
var csv = require('csv-parse/lib/sync')
var _ = require('co-lodash')
var tsv = require("node-tsv-json")
var parser = require('xml2json')
var jsonexport = require('jsonexport')

var Excel = function(){

	this.readDirectory = co.wrap(function*(directory){
		var self = this
		var sourcesData = []
		var files = yield fs.readdir(directory)
		yield* _.coEach(files,function*(file){
			var full_path = directory+"/"+file
			var sheet = yield self.readFile(full_path)
			sourcesData.push(sheet)
		})
		return Promise.resolve(sourcesData)
	})

	this.readFile = co.wrap(function*(file){
		if(this.isExcel(file)){
			var sourceData = []
			var sheets = xlsx.parse(yield fs.readFile(file))
			sheets.some(function(sheet){ sourceData.push(sheet) })
			return Promise.resolve(sourceData)
		} else if(this.isCsv(file)){
			var fileData = yield fs.readFile(file)
			try{
				sourceData = [{
					'name':'Hoja1',
					'data': yield csv(fileData,{relax_column_count:true})
				}]
			} catch(e){ console.log(e) }
			return Promise.resolve(sourceData)
		} else if(this.isTsv(file)){
			var tsvData = yield this.parseTsv(file)
			sourceData = [{
				'name':'Hoja1',
				'data': tsvData
			}]
			return Promise.resolve(sourceData)
		} else if(this.isXml(file)){
			var csvData = yield this.parseXml2Csv(file)
			var jsonData = (typeof csvData=='string') ? yield csv(csvData,{relax_column_count:true}) : null
			sourceData = [{
				'name':'Hoja1',
				'data': jsonData
			}]
			return Promise.resolve(sourceData)
		}
		return Promise.resolve(null)
	})

	this.parseXml2Csv = function(file){
		return new Promise(function(resolve, reject){
			co(function*(){
				//if(err) reject(err)
				var xml = yield fs.readFile(file, 'utf8')
				var json = JSON.parse( parser.toJson(xml) )
				var csvData = yield parseXmlCr1(json)
				resolve(csvData)
			})
		})
	}

	var parseXmlCr1 = function(jsonData){
		return new Promise(function(resolve, reject){
			co(function*(){
				if(jsonData['soapenv:Envelope']['soapenv:Body']['ReportResponse']['Report']['Report']['Customer']){
					var data = jsonData['soapenv:Envelope']['soapenv:Body']['ReportResponse']['Report']['Report']['Customer']['ReportItems']
					var csvData = yield parseJson2Csv(data)
					resolve(csvData)
				} else {
					if(!jsonData['soapenv:Envelope']['soapenv:Body']['ReportResponse']['Report']['Exception']){
						resolve({message:'Ocurri√≥ un error desconocido al intentar procesar el fichero xml'})
					} else {
						resolve({message:jsonData['soapenv:Envelope']['soapenv:Body']['ReportResponse']['Report']['Exception']['Message']})
					}
				}
			})
		})
	}

	var parseJson2Csv = function(jsonData){
		return new Promise(function(resolve, reject){
			jsonexport(jsonData, function(err, csv){
				resolve(csv)
			})
		})
	}

	this.parseTsv = function(file){
		return new Promise(function(resolve, reject){
			tsv({
			  input: file,
			  output: "output.json"
			  ,parseRows: true
			}, function(err, result) {
			  if(err) {
			    console.error(err)
			  }else {
			    resolve(result)
			  }
			})
		})
	}

	this.isExcel = function(filePath){
		return filePath.indexOf('.xls') != -1
	}

	this.isCsv = function(filePath){
		return filePath.indexOf('.csv') != -1
	}

	this.isTsv = function(filePath){
		return filePath.indexOf('.tsv') != -1
	}

	this.isXml = function(filePath){
		return filePath.indexOf('.xml') != -1
	}

}

module.exports = Excel;
